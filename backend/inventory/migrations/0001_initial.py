# Generated by Django 4.1.4 on 2023-03-05 09:37

import autocli2.base.validators.base_validator
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='DataTimeModel create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='DataTimeModel last update date.', verbose_name='Updated')),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 3 to 64 digits, letters or special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'IdentificationModel with this name already exists.'}, help_text='IdentificationModel name.', max_length=64, unique=True, validators=[autocli2.base.validators.base_validator.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text='IdentificationModel name representation (Slug).', max_length=64, unique=True, verbose_name='Slug')),
                ('description', models.CharField(blank=True, default='IdentificationModel default description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='IdentificationModel description.', max_length=256, null=True, validators=[autocli2.base.validators.base_validator.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='IdentificationModel graphical representation.', verbose_name='IdentificationModel ico')),
                ('is_deleted', models.BooleanField(default=False, help_text='Is StatusModel deleted (Deleted StatusModel is reserved for backward compatibility).', verbose_name='Deleted')),
                ('is_root', models.BooleanField(default=False, help_text='Is StatusModel root (Root StatusModel cannot be deleted or modify).', verbose_name='Root')),
                ('is_active', models.BooleanField(default=True, help_text='Is StatusModel active (Inactive StatusModel has limited functionality).', verbose_name='Active')),
                ('is_global', models.BooleanField(default=False, help_text='Xxx.', verbose_name='Xxxx')),
                ('username', models.CharField(blank=True, help_text='Xxx.', max_length=128, null=True, verbose_name='Username')),
                ('password', models.CharField(blank=True, help_text='Xxx.', max_length=128, null=True, verbose_name='Password')),
                ('token', models.CharField(blank=True, help_text='Xxx.', max_length=128, null=True, verbose_name='Token')),
                ('administrator', models.ForeignKey(blank=True, help_text='Administrator responsible for provided AdministratorModel.', null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Administrator')),
            ],
            options={
                'verbose_name': 'Credential',
                'verbose_name_plural': 'Credentials',
            },
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='DataTimeModel create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='DataTimeModel last update date.', verbose_name='Updated')),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 3 to 64 digits, letters or special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'IdentificationModel with this name already exists.'}, help_text='IdentificationModel name.', max_length=64, unique=True, validators=[autocli2.base.validators.base_validator.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text='IdentificationModel name representation (Slug).', max_length=64, unique=True, verbose_name='Slug')),
                ('description', models.CharField(blank=True, default='IdentificationModel default description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='IdentificationModel description.', max_length=256, null=True, validators=[autocli2.base.validators.base_validator.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='IdentificationModel graphical representation.', verbose_name='IdentificationModel ico')),
                ('is_deleted', models.BooleanField(default=False, help_text='Is StatusModel deleted (Deleted StatusModel is reserved for backward compatibility).', verbose_name='Deleted')),
                ('is_root', models.BooleanField(default=False, help_text='Is StatusModel root (Root StatusModel cannot be deleted or modify).', verbose_name='Root')),
                ('is_active', models.BooleanField(default=True, help_text='Is StatusModel active (Inactive StatusModel has limited functionality).', verbose_name='Active')),
                ('api_token_heder_key', models.CharField(blank=True, help_text='When authenticating an API connection using an API         token, the token header key value defines the API request header key. In the example "Authorization=APIToken {{key}}", the token header key value is Authorization.', max_length=128, null=True, verbose_name='API token heder key')),
                ('api_token_heder_value', models.CharField(blank=True, help_text='When authenticating an API connection using an API token, the token header value defines the API request header key. In the example "Authorization=APIToken {{key}}", the token header value is APIToken.', max_length=128, null=True, verbose_name='API token heder value')),
                ('api_pagination', models.BooleanField(default=True, help_text='When the pagination value is active, the API request will be repeated to collect all objects from all paginated pages.', verbose_name='API pagination')),
                ('api_next_page_code_path', models.JSONField(blank=True, help_text='The next page path value is used by the connection template when the API request returns a response, that is divided into many pages (paginated response). In this case next page path value is used to retrieve the pagination code required to prepare the next API request for other pages (The value will only be used if the pagination field is enabled).', null=True, verbose_name='API next page code path')),
                ('api_next_page_link_path', models.JSONField(blank=True, help_text='The next page path value is used by the connection template when the API request returns a response that is divided into many pages (paginated response). In this case, the next page path value is used to retrieve the pagination URL link used in the next API request for other pages (The value will only be used if the pagination field is enabled).', null=True, verbose_name='API next page link path')),
                ('api_pagination_param_key', models.CharField(blank=True, help_text='Information collected based on the next page code path value is added to the URL with a specific code. This code should be provided as a pagination param key value. For example, the value "cursor" will be added to the URL in the form "?cursor={{next page code}}" (The value will only be used if the pagination field is enabled).', max_length=128, null=True, verbose_name='API pagination param key')),
                ('api_data_path', models.JSONField(blank=True, help_text='The data path value is used to collect useful data included in the API response.', null=True, verbose_name='API data path')),
                ('api_default_header', models.JSONField(blank=True, help_text='Xxx.', null=True, verbose_name='API default heder')),
                ('api_default_params', models.JSONField(blank=True, help_text='Xxx.', null=True, verbose_name='API default parameters')),
            ],
            options={
                'verbose_name': 'Platform',
                'verbose_name_plural': 'Platforms',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='DataTimeModel create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='DataTimeModel last update date.', verbose_name='Updated')),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 3 to 64 digits, letters or special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'IdentificationModel with this name already exists.'}, help_text='IdentificationModel name.', max_length=64, unique=True, validators=[autocli2.base.validators.base_validator.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text='IdentificationModel name representation (Slug).', max_length=64, unique=True, verbose_name='Slug')),
                ('description', models.CharField(blank=True, default='IdentificationModel default description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='IdentificationModel description.', max_length=256, null=True, validators=[autocli2.base.validators.base_validator.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='IdentificationModel graphical representation.', verbose_name='IdentificationModel ico')),
                ('is_deleted', models.BooleanField(default=False, help_text='Is StatusModel deleted (Deleted StatusModel is reserved for backward compatibility).', verbose_name='Deleted')),
                ('is_root', models.BooleanField(default=False, help_text='Is StatusModel root (Root StatusModel cannot be deleted or modify).', verbose_name='Root')),
                ('is_active', models.BooleanField(default=True, help_text='Is StatusModel active (Inactive StatusModel has limited functionality).', verbose_name='Active')),
                ('code', models.CharField(blank=True, help_text='Xxx.', max_length=32, null=True, verbose_name='Region code')),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regions',
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='DataTimeModel create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='DataTimeModel last update date.', verbose_name='Updated')),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 3 to 64 digits, letters or special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'IdentificationModel with this name already exists.'}, help_text='IdentificationModel name.', max_length=64, unique=True, validators=[autocli2.base.validators.base_validator.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text='IdentificationModel name representation (Slug).', max_length=64, unique=True, verbose_name='Slug')),
                ('description', models.CharField(blank=True, default='IdentificationModel default description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='IdentificationModel description.', max_length=256, null=True, validators=[autocli2.base.validators.base_validator.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='IdentificationModel graphical representation.', verbose_name='IdentificationModel ico')),
                ('is_deleted', models.BooleanField(default=False, help_text='Is StatusModel deleted (Deleted StatusModel is reserved for backward compatibility).', verbose_name='Deleted')),
                ('is_root', models.BooleanField(default=False, help_text='Is StatusModel root (Root StatusModel cannot be deleted or modify).', verbose_name='Root')),
                ('is_active', models.BooleanField(default=True, help_text='Is StatusModel active (Inactive StatusModel has limited functionality).', verbose_name='Active')),
                ('code', models.CharField(blank=True, help_text='Xxx.', max_length=32, null=True, verbose_name='Site code')),
                ('gps_coordinates', models.CharField(blank=True, help_text='Xxx.', max_length=128, null=True, verbose_name='GPS coordinates')),
                ('physical_address', models.CharField(blank=True, help_text='Xxx.', max_length=128, null=True, verbose_name='Physical address')),
                ('region', models.ForeignKey(blank=True, help_text='Region.', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.region', verbose_name='Region')),
            ],
            options={
                'verbose_name': 'Site',
                'verbose_name_plural': 'Sites',
            },
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='DataTimeModel create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='DataTimeModel last update date.', verbose_name='Updated')),
                ('name', models.CharField(error_messages={'blank': 'Name field is mandatory.', 'invalid': 'Enter the correct name value. It must contain 3 to 64 digits, letters or special characters -, _ or spaces.', 'null': 'Name field is mandatory.', 'unique': 'IdentificationModel with this name already exists.'}, help_text='IdentificationModel name.', max_length=64, unique=True, validators=[autocli2.base.validators.base_validator.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text='IdentificationModel name representation (Slug).', max_length=64, unique=True, verbose_name='Slug')),
                ('description', models.CharField(blank=True, default='IdentificationModel default description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='IdentificationModel description.', max_length=256, null=True, validators=[autocli2.base.validators.base_validator.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='IdentificationModel graphical representation.', verbose_name='IdentificationModel ico')),
                ('is_deleted', models.BooleanField(default=False, help_text='Is StatusModel deleted (Deleted StatusModel is reserved for backward compatibility).', verbose_name='Deleted')),
                ('is_root', models.BooleanField(default=False, help_text='Is StatusModel root (Root StatusModel cannot be deleted or modify).', verbose_name='Root')),
                ('is_active', models.BooleanField(default=True, help_text='Is StatusModel active (Inactive StatusModel has limited functionality).', verbose_name='Active')),
                ('hostname', models.CharField(help_text='Xxx.', max_length=128, verbose_name='Hostname')),
                ('ssh_port', models.IntegerField(default=22, help_text='Xxx.', verbose_name='SSH port')),
                ('http_port', models.IntegerField(default=443, help_text='Xxx.', verbose_name='HTTP/S port')),
                ('certificate_check', models.BooleanField(default=False, help_text='If enabled, attempts to validate host certificate. If disabled, ignores certificate validation process.', verbose_name='Certificate check')),
                ('credential', models.ForeignKey(blank=True, help_text='Credentials.', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.credential', verbose_name='Credentials')),
                ('platform', models.ForeignKey(blank=True, help_text='Software.', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.platform', verbose_name='Software')),
                ('site', models.ForeignKey(blank=True, help_text='Site.', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.site', verbose_name='Site')),
            ],
            options={
                'verbose_name': 'Host',
                'verbose_name_plural': 'Hosts',
            },
        ),
    ]
