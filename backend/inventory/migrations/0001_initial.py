# Generated by Django 4.1.7 on 2023-03-31 16:42

import autocli2.base.validators.base_validator
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import inventory.validators.inventory_validator


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, help_text='Is Base model object deleted.', verbose_name='Deleted')),
                ('is_root', models.BooleanField(default=False, help_text='Is Base model root (Root Base model cannot be deleted or modify).', verbose_name='Root')),
                ('is_active', models.BooleanField(default=True, help_text='Is Base model active (Inactive Base model has limited functionality).', verbose_name='Active')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Base model create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Base model last update date.', verbose_name='Updated')),
                ('name', models.CharField(error_messages={'invalid': 'Enter the correct name value. It must contain 3 to 64 digits, letters or special characters -, _ or spaces.'}, help_text='IdentificationModel name.', max_length=64, unique=True, validators=[autocli2.base.validators.base_validator.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text='IdentificationModel name representation (Slug).', max_length=128, unique=True, verbose_name='Slug')),
                ('description', models.CharField(blank=True, default='IdentificationModel default description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='IdentificationModel description.', max_length=256, null=True, validators=[autocli2.base.validators.base_validator.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='IdentificationModel graphical representation.', verbose_name='IdentificationModel ico')),
                ('is_global', models.BooleanField(default=False, help_text='Global credentials visible to all administrators.', verbose_name='Global credentials')),
                ('username', models.CharField(blank=True, help_text='Value of the credential user name.', max_length=128, null=True, verbose_name='Username')),
                ('password', models.CharField(blank=True, help_text='Value of the credential password (If both Password and Token are specified, the Token will be used to authenticate HTTP requests).', max_length=128, null=True, verbose_name='Password')),
                ('token', models.CharField(blank=True, help_text='Value of the credential token (If both Password and Token are specified, the Token will be used to authenticate HTTP requests).', max_length=128, null=True, verbose_name='Token')),
                ('administrator', models.ForeignKey(blank=True, help_text='Administrator responsible for provided AdministratorModel.', null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Administrator')),
            ],
            options={
                'verbose_name': 'Credential',
                'verbose_name_plural': 'Credentials',
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, help_text='Is Base model object deleted.', verbose_name='Deleted')),
                ('is_root', models.BooleanField(default=False, help_text='Is Base model root (Root Base model cannot be deleted or modify).', verbose_name='Root')),
                ('is_active', models.BooleanField(default=True, help_text='Is Base model active (Inactive Base model has limited functionality).', verbose_name='Active')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Base model create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Base model last update date.', verbose_name='Updated')),
                ('name', models.CharField(error_messages={'invalid': 'Enter the correct name value. It must contain 3 to 64 digits, letters or special characters -, _ or spaces.'}, help_text='IdentificationModel name.', max_length=64, unique=True, validators=[autocli2.base.validators.base_validator.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text='IdentificationModel name representation (Slug).', max_length=128, unique=True, verbose_name='Slug')),
                ('description', models.CharField(blank=True, default='IdentificationModel default description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='IdentificationModel description.', max_length=256, null=True, validators=[autocli2.base.validators.base_validator.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='IdentificationModel graphical representation.', verbose_name='IdentificationModel ico')),
                ('code', models.CharField(blank=True, help_text='Region code (Must contain 2 to 8 letters).', max_length=8, null=True, validators=[inventory.validators.inventory_validator.CodeValueValidator()], verbose_name='Region code')),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regions',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, help_text='Is Base model object deleted.', verbose_name='Deleted')),
                ('is_root', models.BooleanField(default=False, help_text='Is Base model root (Root Base model cannot be deleted or modify).', verbose_name='Root')),
                ('is_active', models.BooleanField(default=True, help_text='Is Base model active (Inactive Base model has limited functionality).', verbose_name='Active')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Base model create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Base model last update date.', verbose_name='Updated')),
                ('name', models.CharField(error_messages={'invalid': 'Enter the correct name value. It must contain 3 to 64 digits, letters or special characters -, _ or spaces.'}, help_text='IdentificationModel name.', max_length=64, unique=True, validators=[autocli2.base.validators.base_validator.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text='IdentificationModel name representation (Slug).', max_length=128, unique=True, verbose_name='Slug')),
                ('description', models.CharField(blank=True, default='IdentificationModel default description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='IdentificationModel description.', max_length=256, null=True, validators=[autocli2.base.validators.base_validator.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='IdentificationModel graphical representation.', verbose_name='IdentificationModel ico')),
                ('color', models.CharField(choices=[('aa1409', 'Dark red'), ('f44336', 'Red'), ('e91e63', 'Pink'), ('ffe4e1', 'Rose'), ('ff66ff', 'Fuchsia'), ('9c27b0', 'Purple'), ('673ab7', 'Dark purple'), ('3f51b5', 'Indigo'), ('2196f3', 'Blue'), ('03a9f4', 'Light blue'), ('00bcd4', 'Cyan'), ('009688', 'Teal'), ('00ffff', 'Aqua'), ('2f6a31', 'Dark green'), ('4caf50', 'Green'), ('8bc34a', 'Light green'), ('cddc39', 'Lime'), ('ffeb3b', 'Yellow'), ('ffc107', 'Amber'), ('ff9800', 'Orange'), ('ff5722', 'Dark orange'), ('795548', 'Brown'), ('c0c0c0', 'Light grey'), ('9e9e9e', 'Grey'), ('607d8b', 'Dark grey'), ('111111', 'Black'), ('ffffff', 'White')], default='2196f3', help_text='Tag related color.', max_length=6, verbose_name='Color')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Site',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, help_text='Is Base model object deleted.', verbose_name='Deleted')),
                ('is_root', models.BooleanField(default=False, help_text='Is Base model root (Root Base model cannot be deleted or modify).', verbose_name='Root')),
                ('is_active', models.BooleanField(default=True, help_text='Is Base model active (Inactive Base model has limited functionality).', verbose_name='Active')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Base model create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Base model last update date.', verbose_name='Updated')),
                ('name', models.CharField(error_messages={'invalid': 'Enter the correct name value. It must contain 3 to 64 digits, letters or special characters -, _ or spaces.'}, help_text='IdentificationModel name.', max_length=64, unique=True, validators=[autocli2.base.validators.base_validator.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text='IdentificationModel name representation (Slug).', max_length=128, unique=True, verbose_name='Slug')),
                ('description', models.CharField(blank=True, default='IdentificationModel default description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='IdentificationModel description.', max_length=256, null=True, validators=[autocli2.base.validators.base_validator.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='IdentificationModel graphical representation.', verbose_name='IdentificationModel ico')),
                ('code', models.CharField(blank=True, help_text='Site code (Must contain 2 to 8 letters).', max_length=8, null=True, validators=[inventory.validators.inventory_validator.CodeValueValidator()], verbose_name='Site code')),
                ('gps_coordinates', models.CharField(blank=True, help_text='GPS coordinates.', max_length=128, null=True, verbose_name='GPS coordinates')),
                ('physical_address', models.CharField(blank=True, help_text='Physical address.', max_length=128, null=True, verbose_name='Physical address')),
                ('region', models.ForeignKey(blank=True, help_text='Region associated with current site.', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.region', verbose_name='Region')),
                ('tag', models.ManyToManyField(help_text='Related tag.', to='inventory.tag', verbose_name='Tag')),
            ],
            options={
                'verbose_name': 'Site',
                'verbose_name_plural': 'Sites',
            },
        ),
        migrations.AddField(
            model_name='region',
            name='tag',
            field=models.ManyToManyField(help_text='Related tag.', to='inventory.tag', verbose_name='Tag'),
        ),
        migrations.CreateModel(
            name='Platform',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, help_text='Is Base model object deleted.', verbose_name='Deleted')),
                ('is_root', models.BooleanField(default=False, help_text='Is Base model root (Root Base model cannot be deleted or modify).', verbose_name='Root')),
                ('is_active', models.BooleanField(default=True, help_text='Is Base model active (Inactive Base model has limited functionality).', verbose_name='Active')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Base model create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Base model last update date.', verbose_name='Updated')),
                ('name', models.CharField(error_messages={'invalid': 'Enter the correct name value. It must contain 3 to 64 digits, letters or special characters -, _ or spaces.'}, help_text='IdentificationModel name.', max_length=64, unique=True, validators=[autocli2.base.validators.base_validator.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text='IdentificationModel name representation (Slug).', max_length=128, unique=True, verbose_name='Slug')),
                ('description', models.CharField(blank=True, default='IdentificationModel default description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='IdentificationModel description.', max_length=256, null=True, validators=[autocli2.base.validators.base_validator.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='IdentificationModel graphical representation.', verbose_name='IdentificationModel ico')),
                ('api_token_heder_key', models.CharField(blank=True, help_text='When authenticating an API connection using an API         token, the token header key value defines the API request header key. In the example "Authorization=APIToken {{key}}", the token header key value is Authorization.', max_length=128, null=True, verbose_name='API token heder key')),
                ('api_token_heder_value', models.CharField(blank=True, help_text='When authenticating an API connection using an API token, the token header value defines the API request header key. In the example "Authorization=APIToken {{key}}", the token header value is APIToken.', max_length=128, null=True, verbose_name='API token heder value')),
                ('api_pagination', models.BooleanField(default=False, help_text='When the pagination value is active, the API request will be repeated to collect all objects from all paginated pages.', verbose_name='API pagination')),
                ('api_next_page_code_path', models.JSONField(blank=True, help_text='The next page path value is used by the connection template when the API request returns a response, that is divided into many pages (paginated response). In this case next page path value is used to retrieve the pagination code required to prepare the next API request for other pages (The value will only be used if the pagination field is enabled).', null=True, verbose_name='API next page code path')),
                ('api_next_page_link_path', models.JSONField(blank=True, help_text='The next page path value is used by the connection template when the API request returns a response that is divided into many pages (paginated response). In this case, the next page path value is used to retrieve the pagination URL link used in the next API request for other pages (The value will only be used if the pagination field is enabled).', null=True, verbose_name='API next page link path')),
                ('api_pagination_param_key', models.CharField(blank=True, help_text='Information collected based on the next page code path value is added to the URL with a specific code. This code should be provided as a pagination param key value. For example, the value "cursor" will be added to the URL in the form "?cursor={{next page code}}" (The value will only be used if the pagination field is enabled).', max_length=128, null=True, verbose_name='API pagination param key')),
                ('api_data_path', models.JSONField(blank=True, help_text='The data path value is used to collect useful data included in the API response.', null=True, verbose_name='API data path')),
                ('api_default_header', models.JSONField(blank=True, help_text='Default heder used during HTTP(S) requests.', null=True, verbose_name='API default heder')),
                ('api_default_params', models.JSONField(blank=True, help_text='Default parameters used during HTTP(S) requests.', null=True, verbose_name='API default parameters')),
                ('tag', models.ManyToManyField(help_text='Related tag.', to='inventory.tag', verbose_name='Tag')),
            ],
            options={
                'verbose_name': 'Platform',
                'verbose_name_plural': 'Platforms',
            },
        ),
        migrations.CreateModel(
            name='Host',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False, help_text='Is Base model object deleted.', verbose_name='Deleted')),
                ('is_root', models.BooleanField(default=False, help_text='Is Base model root (Root Base model cannot be deleted or modify).', verbose_name='Root')),
                ('is_active', models.BooleanField(default=True, help_text='Is Base model active (Inactive Base model has limited functionality).', verbose_name='Active')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Base model create date.', verbose_name='Created')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Base model last update date.', verbose_name='Updated')),
                ('name', models.CharField(error_messages={'invalid': 'Enter the correct name value. It must contain 3 to 64 digits, letters or special characters -, _ or spaces.'}, help_text='IdentificationModel name.', max_length=64, unique=True, validators=[autocli2.base.validators.base_validator.NameValueValidator()], verbose_name='Name')),
                ('slug', models.CharField(help_text='IdentificationModel name representation (Slug).', max_length=128, unique=True, verbose_name='Slug')),
                ('description', models.CharField(blank=True, default='IdentificationModel default description.', error_messages={'invalid': 'Enter the correct description value. It must contain 8 to 256 digits, letters and special characters -, _, . or spaces.'}, help_text='IdentificationModel description.', max_length=256, null=True, validators=[autocli2.base.validators.base_validator.DescriptionValueValidator()], verbose_name='Description')),
                ('ico', models.IntegerField(default=1, help_text='IdentificationModel graphical representation.', verbose_name='IdentificationModel ico')),
                ('hostname', models.CharField(help_text='Valid IP address or domain name used to establish the SSH / HTTP(S) connections.', max_length=128, unique=True, verbose_name='Hostname')),
                ('data_collection_protocol', models.IntegerField(choices=[(1, 'SSH'), (2, 'HTTP(S)'), (3, 'Discovery')], default=1, help_text='The network protocol that will be used to execute connection template (SSH / HTTP(S)).', verbose_name='Data collection protocol')),
                ('ssh_port', models.IntegerField(default=22, help_text='The TCP port that will be used during the SSH sessions.', verbose_name='SSH port')),
                ('http_port', models.IntegerField(default=443, help_text='The TCP port that will be used during the HTTP(S) sessions.', verbose_name='HTTP/S port')),
                ('certificate_check', models.BooleanField(default=True, help_text='If enabled, attempts to validate host certificate. If disabled, ignores certificate validation process.', verbose_name='Certificate check')),
                ('credential', models.ForeignKey(default=1, help_text='Credentials associated with current host.', on_delete=django.db.models.deletion.PROTECT, to='inventory.credential', verbose_name='Credentials')),
                ('platform', models.ForeignKey(default=1, help_text='Platform associated with current host.', on_delete=django.db.models.deletion.PROTECT, to='inventory.platform', verbose_name='Platform')),
                ('site', models.ForeignKey(blank=True, help_text='Site associated with current host.', null=True, on_delete=django.db.models.deletion.PROTECT, to='inventory.site', verbose_name='Site')),
                ('tag', models.ManyToManyField(help_text='Related tag.', to='inventory.tag', verbose_name='Tag')),
            ],
            options={
                'verbose_name': 'Host',
                'verbose_name_plural': 'Hosts',
            },
        ),
        migrations.AddField(
            model_name='credential',
            name='tag',
            field=models.ManyToManyField(help_text='Related tag.', to='inventory.tag', verbose_name='Tag'),
        ),
    ]
